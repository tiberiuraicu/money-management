{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport financeServices from \"../../services/financeServices\";\nexport function getShareMetrics(symbol) {\n  var shareData, shareQuote;\n  return _regeneratorRuntime.async(function getShareMetrics$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          shareData = [];\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(financeServices.getShareMetrics(symbol));\n\n        case 3:\n          shareQuote = _context.sent;\n          shareData.push({\n            key: shareQuote.regularMarketPrice,\n            value: shareQuote.regularMarketPrice,\n            name: \"Current price\"\n          });\n          shareData.push({\n            key: shareQuote.averageAnalystRating,\n            value: shareQuote.averageAnalystRating,\n            name: \"Average analyst rating\"\n          });\n          shareData.push({\n            key: shareQuote.trailingPE,\n            value: shareQuote.trailingPE,\n            name: \"Trailing P/E\"\n          });\n          shareData.push({\n            key: shareQuote.forwardPE,\n            value: shareQuote.forwardPE,\n            name: \"Forward P/E\"\n          });\n          shareData.push({\n            key: shareQuote.marketCap,\n            value: shareQuote.marketCap + \" \" + shareQuote.financialCurrency,\n            name: \"Market cap\"\n          });\n          shareData.push({\n            key: shareQuote.fiftyTwoWeekRange,\n            value: shareQuote.fiftyTwoWeekRange.low + \" - \" + shareQuote.fiftyTwoWeekRange.high + \" \" + shareQuote.financialCurrency,\n            name: \"52 week range\"\n          });\n          shareData.push({\n            key: shareQuote.epsCurrentYear,\n            value: shareQuote.epsCurrentYear,\n            name: \"EPS current year\"\n          });\n          shareData.push({\n            key: shareQuote.epsForward,\n            value: shareQuote.epsForward,\n            name: \"Forward EPS\"\n          });\n          shareData.push({\n            key: shareQuote.epsTrailingTwelveMonths,\n            value: shareQuote.epsTrailingTwelveMonths,\n            name: \"EPS trailing twelve months\"\n          });\n          return _context.abrupt(\"return\", shareData);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getShareEarnings(symbol) {\n  var shareEarnings, shareEarningsRaw;\n  return _regeneratorRuntime.async(function getShareEarnings$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          shareEarnings = {\n            EPS: {\n              actual: [],\n              estimate: []\n            }\n          };\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(financeServices.getShareEarnings(symbol));\n\n        case 3:\n          shareEarningsRaw = _context2.sent;\n          shareEarningsRaw.earnings.earningsChart.quarterly.map(function (item) {\n            shareEarnings.EPS.actual.push({\n              y: Number(item.actual),\n              x: item.date,\n              label: item.actual\n            });\n            shareEarnings.EPS.estimate.push({\n              y: Number(item.estimate),\n              x: item.date,\n              label: item.estimate\n            });\n          });\n          return _context2.abrupt(\"return\", shareEarnings);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/react native/money-management-project/money-management/components/SharePage/SharePage.services.js"],"names":["financeServices","getShareMetrics","symbol","shareData","shareQuote","push","key","regularMarketPrice","value","name","averageAnalystRating","trailingPE","forwardPE","marketCap","financialCurrency","fiftyTwoWeekRange","low","high","epsCurrentYear","epsForward","epsTrailingTwelveMonths","getShareEarnings","shareEarnings","EPS","actual","estimate","shareEarningsRaw","earnings","earningsChart","quarterly","map","item","y","Number","x","date","label"],"mappings":"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","sourcesContent":["import financeServices from \"../../services/financeServices\";\r\n\r\nexport async function getShareMetrics(symbol) {\r\n  let shareData = [];\r\n\r\n  var shareQuote = await financeServices.getShareMetrics(symbol);\r\n\r\n  shareData.push({\r\n    key: shareQuote.regularMarketPrice,\r\n    value: shareQuote.regularMarketPrice,\r\n    name: \"Current price\",\r\n  });\r\n\r\n  shareData.push({\r\n    key: shareQuote.averageAnalystRating,\r\n    value: shareQuote.averageAnalystRating,\r\n    name: \"Average analyst rating\",\r\n  });\r\n  shareData.push({\r\n    key: shareQuote.trailingPE,\r\n    value: shareQuote.trailingPE,\r\n    name: \"Trailing P/E\",\r\n  });\r\n  shareData.push({\r\n    key: shareQuote.forwardPE,\r\n    value: shareQuote.forwardPE,\r\n    name: \"Forward P/E\",\r\n  });\r\n  shareData.push({\r\n    key: shareQuote.marketCap,\r\n    value: shareQuote.marketCap + \" \" + shareQuote.financialCurrency,\r\n    name: \"Market cap\",\r\n  });\r\n  shareData.push({\r\n    key: shareQuote.fiftyTwoWeekRange,\r\n    value:\r\n      shareQuote.fiftyTwoWeekRange.low +\r\n      \" - \" +\r\n      shareQuote.fiftyTwoWeekRange.high +\r\n      \" \" +\r\n      shareQuote.financialCurrency,\r\n    name: \"52 week range\",\r\n  });\r\n  shareData.push({\r\n    key: shareQuote.epsCurrentYear,\r\n    value: shareQuote.epsCurrentYear,\r\n    name: \"EPS current year\",\r\n  });\r\n  shareData.push({\r\n    key: shareQuote.epsForward,\r\n    value: shareQuote.epsForward,\r\n    name: \"Forward EPS\",\r\n  });\r\n  shareData.push({\r\n    key: shareQuote.epsTrailingTwelveMonths,\r\n    value: shareQuote.epsTrailingTwelveMonths,\r\n    name: \"EPS trailing twelve months\",\r\n  });\r\n  //return the current share price\r\n  return shareData;\r\n}\r\n\r\nexport async function getShareEarnings(symbol) {\r\n  let shareEarnings = {\r\n    EPS: {\r\n      actual: [],\r\n      estimate: [],\r\n    },\r\n  };\r\n  // await financeServices.askPermissions();\r\n  // await financeServices.sendNotificationImmediately(symbol);\r\n  let shareEarningsRaw = await financeServices.getShareEarnings(symbol);\r\n\r\n  shareEarningsRaw.earnings.earningsChart.quarterly.map((item) => {\r\n    shareEarnings.EPS.actual.push({\r\n      y: Number(item.actual),\r\n      x: item.date,\r\n      label: item.actual,\r\n    });\r\n\r\n    shareEarnings.EPS.estimate.push({\r\n      y: Number(item.estimate),\r\n      x: item.date,\r\n      label: item.estimate,\r\n    });\r\n  });\r\n  return shareEarnings;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}