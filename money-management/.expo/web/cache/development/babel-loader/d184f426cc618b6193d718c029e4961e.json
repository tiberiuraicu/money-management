{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as financeServices from \"../../services/financeServices\";\nimport * as storageServices from \"../../services/storageServices\";\nexport function getAllSharesPrices(portofolio) {\n  var symbolList, listItem, shareQuote, item;\n  return _regeneratorRuntime.async(function getAllSharesPrices$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          symbolList = [];\n\n          for (listItem in portofolio.shares) {\n            listItem = portofolio.shares[listItem];\n            symbolList.push(listItem.symbol);\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(financeServices.default.getShareMetrics(symbolList));\n\n        case 4:\n          shareQuote = _context.sent;\n          symbolList = {};\n\n          for (item in shareQuote) {\n            symbolList[shareQuote[item].symbol] = {\n              price: shareQuote[item].regularMarketPrice,\n              shortName: shareQuote[item].shortName\n            };\n          }\n\n          return _context.abrupt(\"return\", symbolList);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getAnalyticsForAllShares() {\n  var portofolio, sharesNameAndPrice, sharesAnalyticsList, portofolioValue, listItem, shareAnalytics, totalMoneyInvested, totalNumberOfSharesOwned;\n  return _regeneratorRuntime.async(function getAnalyticsForAllShares$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(storageServices.default.getItem(\"portofolio\"));\n\n        case 3:\n          portofolio = _context2.sent;\n          portofolio = JSON.parse(portofolio);\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(getAllSharesPrices(portofolio));\n\n        case 7:\n          sharesNameAndPrice = _context2.sent;\n          sharesAnalyticsList = [];\n          portofolioValue = 0;\n\n          for (listItem in portofolio.shares) {\n            listItem = portofolio.shares[listItem];\n            shareAnalytics = {\n              symbol: listItem.symbol,\n              companyName: sharesNameAndPrice[listItem.symbol].shortName,\n              pieChartColor: listItem.pieChartColor,\n              currentPrice: sharesNameAndPrice[listItem.symbol].price,\n              shareTotalValue: 0,\n              shareTotalProfit: 0,\n              averageEntryPrice: 0\n            };\n            totalMoneyInvested = 0;\n            totalNumberOfSharesOwned = 0;\n            listItem.transactions.map(function (transaction) {\n              var numberOfSharesPerTransaction = transaction.investedAmount / transaction.priceAtBuy;\n              totalNumberOfSharesOwned += Number(numberOfSharesPerTransaction);\n              totalMoneyInvested += Number(transaction.investedAmount);\n              var currentTransactionValue = shareAnalytics.currentPrice * numberOfSharesPerTransaction;\n              shareAnalytics.shareTotalValue += currentTransactionValue;\n              var currentTransactionProfit = currentTransactionValue - transaction.investedAmount;\n              shareAnalytics.shareTotalProfit += currentTransactionProfit;\n              shareAnalytics.averageEntryPrice = totalMoneyInvested / totalNumberOfSharesOwned;\n            });\n            portofolioValue = portofolioValue + shareAnalytics.shareTotalValue;\n            sharesAnalyticsList.push(shareAnalytics);\n          }\n\n          return _context2.abrupt(\"return\", [portofolioValue, sharesAnalyticsList]);\n\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 14]], Promise);\n}","map":{"version":3,"sources":["D:/react native/money-management-project/money-management/components/Portofolio/Portofolio.services.js"],"names":["financeServices","storageServices","getAllSharesPrices","portofolio","symbolList","listItem","shares","push","symbol","default","getShareMetrics","shareQuote","item","price","regularMarketPrice","shortName","getAnalyticsForAllShares","getItem","JSON","parse","sharesNameAndPrice","sharesAnalyticsList","portofolioValue","shareAnalytics","companyName","pieChartColor","currentPrice","shareTotalValue","shareTotalProfit","averageEntryPrice","totalMoneyInvested","totalNumberOfSharesOwned","transactions","map","transaction","numberOfSharesPerTransaction","investedAmount","priceAtBuy","Number","currentTransactionValue","currentTransactionProfit","console","log"],"mappings":"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","sourcesContent":["import * as financeServices from \"../../services/financeServices\";\r\nimport * as storageServices from \"../../services/storageServices\";\r\n\r\nexport async function getAllSharesPrices(portofolio) {\r\n  let symbolList = [];\r\n\r\n  // get all shares purchased\r\n  for (var listItem in portofolio.shares) {\r\n    listItem = portofolio.shares[listItem];\r\n    symbolList.push(listItem.symbol);\r\n  }\r\n\r\n  var shareQuote = await financeServices.default.getShareMetrics(symbolList);\r\n  symbolList = {};\r\n\r\n  for (var item in shareQuote) {\r\n    symbolList[shareQuote[item].symbol] = {\r\n      price: shareQuote[item].regularMarketPrice,\r\n      shortName: shareQuote[item].shortName,\r\n    };\r\n  }\r\n  return symbolList;\r\n}\r\n\r\n// get symbol, average entry price, profit and total value for all shares\r\nexport async function getAnalyticsForAllShares() {\r\n  try {\r\n    var portofolio = await storageServices.default.getItem(\"portofolio\");\r\n    portofolio = JSON.parse(portofolio);\r\n    let sharesNameAndPrice = await getAllSharesPrices(portofolio);\r\n    // array for placing the results\r\n    var sharesAnalyticsList = [];\r\n\r\n    let portofolioValue = 0;\r\n\r\n    // iterate trough every share object\r\n    for (var listItem in portofolio.shares) {\r\n      listItem = portofolio.shares[listItem];\r\n      // create share analytics object\r\n      var shareAnalytics = {\r\n        symbol: listItem.symbol,\r\n        companyName: sharesNameAndPrice[listItem.symbol].shortName,\r\n        pieChartColor: listItem.pieChartColor,\r\n        currentPrice: sharesNameAndPrice[listItem.symbol].price,\r\n        shareTotalValue: 0,\r\n        shareTotalProfit: 0,\r\n        averageEntryPrice: 0,\r\n      };\r\n\r\n      var totalMoneyInvested = 0;\r\n      var totalNumberOfSharesOwned = 0;\r\n\r\n      listItem.transactions.map((transaction) => {\r\n        // divide invested amount to the inserted price\r\n        var numberOfSharesPerTransaction =\r\n          transaction.investedAmount / transaction.priceAtBuy;\r\n\r\n        totalNumberOfSharesOwned += Number(numberOfSharesPerTransaction);\r\n        totalMoneyInvested += Number(transaction.investedAmount);\r\n\r\n        //calculate the transaction value\r\n        var currentTransactionValue =\r\n          shareAnalytics.currentPrice * numberOfSharesPerTransaction;\r\n\r\n        // add value to the total portofolio value\r\n        shareAnalytics.shareTotalValue += currentTransactionValue;\r\n\r\n        // subtract the invested amount from the result\r\n        var currentTransactionProfit =\r\n          currentTransactionValue - transaction.investedAmount;\r\n\r\n        // add the result to the profit value\r\n        shareAnalytics.shareTotalProfit += currentTransactionProfit;\r\n\r\n        //calculate average entry price\r\n        shareAnalytics.averageEntryPrice =\r\n          totalMoneyInvested / totalNumberOfSharesOwned;\r\n      });\r\n      portofolioValue = portofolioValue + shareAnalytics.shareTotalValue;\r\n      sharesAnalyticsList.push(shareAnalytics);\r\n    }\r\n\r\n    return [portofolioValue, sharesAnalyticsList];\r\n  } catch (exception) {\r\n    console.log(exception);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}