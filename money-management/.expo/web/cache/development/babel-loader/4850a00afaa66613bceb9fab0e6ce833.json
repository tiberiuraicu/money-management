{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\react native\\\\money-management\\\\components\\\\Input.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SearchableDropdown from \"react-native-searchable-dropdown\";\nimport financeServices from \"../services/financeServices\";\nimport * as storage from \"../services/storageServices\";\nimport styles from \"./styles/Input.styles\";\n\nvar Input = function Input() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      symbol = _useState2[0],\n      setSymbol = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      priceAtBuy = _useState4[0],\n      setPriceAtBuy = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      investedAmount = _useState6[0],\n      setInvestedAmount = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedShareSymbol = _useState8[0],\n      setSelectedShareSymbol = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      autocompleteNames = _useState10[0],\n      setAutocompleteNames = _useState10[1];\n\n  var setSymbolHandler = function setSymbolHandler(enteredText) {\n    console.log(enteredText);\n    setSymbol(enteredText.name.toUpperCase());\n  };\n\n  var setPriceAtBuyHandler = function setPriceAtBuyHandler(enteredText) {\n    setPriceAtBuy(enteredText);\n  };\n\n  var setInvestedAmountHandler = function setInvestedAmountHandler(enteredText) {\n    setInvestedAmount(enteredText);\n  };\n\n  function setAutocompleteNamesHandler(searchTerm) {\n    return _regeneratorRuntime.async(function setAutocompleteNamesHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = setAutocompleteNames;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(financeServices.getAutoCompleteData(searchTerm));\n\n          case 3:\n            _context.t1 = _context.sent;\n            (0, _context.t0)(_context.t1);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function addInput() {\n    var transaction, share, shareList, symbolExists, i;\n    return _regeneratorRuntime.async(function addInput$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            transaction = {\n              priceAtBuy: priceAtBuy,\n              investedAmount: investedAmount,\n              transactionKey: Math.random().toString()\n            };\n            share = {\n              symbol: symbol.toUpperCase(),\n              transactions: []\n            };\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(storage.default.getAllItems());\n\n          case 5:\n            shareList = _context2.sent;\n            symbolExists = false;\n\n            if (!(shareList.length != 0)) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.t0 = _regeneratorRuntime.keys(shareList);\n\n          case 9:\n            if ((_context2.t1 = _context2.t0()).done) {\n              _context2.next = 16;\n              break;\n            }\n\n            i = _context2.t1.value;\n\n            if (!(JSON.parse(shareList[i]).symbol === symbol)) {\n              _context2.next = 14;\n              break;\n            }\n\n            symbolExists = true;\n            return _context2.abrupt(\"break\", 16);\n\n          case 14:\n            _context2.next = 9;\n            break;\n\n          case 16:\n            if (!symbolExists) {\n              _context2.next = 25;\n              break;\n            }\n\n            _context2.next = 19;\n            return _regeneratorRuntime.awrap(storage.default.getItem(symbol));\n\n          case 19:\n            share = _context2.sent;\n            share = JSON.parse(share);\n            share.transactions.push(transaction);\n            storage.default.updateItem(share.symbol, share);\n            _context2.next = 27;\n            break;\n\n          case 25:\n            share.transactions.push(transaction);\n            storage.default.setItem(share.symbol, share);\n\n          case 27:\n            alert(\"success\");\n            _context2.next = 32;\n            break;\n\n          case 30:\n            _context2.prev = 30;\n            _context2.t2 = _context2[\"catch\"](0);\n\n          case 32:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 30]], Promise);\n  }\n\n  var clearAllData = function clearAllData() {\n    storage.default.clearAllData();\n  };\n\n  return React.createElement(ScrollView, {\n    style: styles.container,\n    keyboardShouldPersistTaps: \"handled\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.inputContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, React.createElement(SearchableDropdown, {\n    multi: true,\n    selectedItems: selectedShareSymbol,\n    onItemSelect: function onItemSelect(item) {\n      setSelectedShareSymbol(item);\n      setSymbolHandler(item);\n    },\n    containerStyle: {\n      padding: 5\n    },\n    itemStyle: {\n      with: \"80%\",\n      padding: 10,\n      marginTop: 2,\n      backgroundColor: \"#ddd\",\n      borderColor: \"#bbb\",\n      borderWidth: 1,\n      borderRadius: 5\n    },\n    itemTextStyle: {\n      color: \"#222\"\n    },\n    itemsContainerStyle: {\n      maxHeight: 140\n    },\n    items: autocompleteNames,\n    defaultIndex: 2,\n    chip: true,\n    resetValue: false,\n    textInputProps: {\n      placeholder: \"placeholder\",\n      underlineColorAndroid: \"transparent\",\n      style: {\n        margin: \"1.5%\",\n        padding: 12,\n        borderWidth: 1,\n        borderColor: \"#ccc\",\n        borderRadius: 5\n      },\n      onTextChange: function onTextChange(text) {\n        setAutocompleteNamesHandler(text);\n      }\n    },\n    listProps: {\n      nestedScrollEnabled: true\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: styles.textInput,\n    keyboardType: \"numeric\",\n    placeholder: \" Price at buy\",\n    placeholderTextColor: \"#788793\",\n    onChangeText: setPriceAtBuyHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: styles.textInput,\n    placeholder: \" Invested amount\",\n    keyboardType: \"numeric\",\n    placeholderTextColor: \"#788793\",\n    onChangeText: setInvestedAmountHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.addTransactionButton,\n    title: \"Add transaction\",\n    onPress: addInput,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.addTransactionText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, \"ADD TRANSACTION\"))), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    style: styles.button,\n    title: \"Delete all data\",\n    onPress: clearAllData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["D:/react native/money-management/components/Input.js"],"names":["React","useState","SearchableDropdown","financeServices","storage","styles","Input","symbol","setSymbol","priceAtBuy","setPriceAtBuy","investedAmount","setInvestedAmount","selectedShareSymbol","setSelectedShareSymbol","autocompleteNames","setAutocompleteNames","setSymbolHandler","enteredText","console","log","name","toUpperCase","setPriceAtBuyHandler","setInvestedAmountHandler","setAutocompleteNamesHandler","searchTerm","getAutoCompleteData","addInput","transaction","transactionKey","Math","random","toString","share","transactions","default","getAllItems","shareList","symbolExists","length","i","JSON","parse","getItem","push","updateItem","setItem","alert","clearAllData","container","inputContainer","item","padding","with","marginTop","backgroundColor","borderColor","borderWidth","borderRadius","color","maxHeight","placeholder","underlineColorAndroid","style","margin","onTextChange","text","nestedScrollEnabled","textInput","addTransactionButton","addTransactionText","button"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Button,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  Text,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport SearchableDropdown from \"react-native-searchable-dropdown\";\r\nimport financeServices from \"../services/financeServices\";\r\nimport * as storage from \"../services/storageServices\";\r\nimport styles from \"./styles/Input.styles\";\r\n\r\nconst Input = () => {\r\n  const [symbol, setSymbol] = useState(\"\");\r\n  const [priceAtBuy, setPriceAtBuy] = useState(\"\");\r\n  const [investedAmount, setInvestedAmount] = useState(\"\");\r\n  const [selectedShareSymbol, setSelectedShareSymbol] = useState(\"\");\r\n  const [autocompleteNames, setAutocompleteNames] = useState([]);\r\n\r\n  const setSymbolHandler = (enteredText) => {\r\n    console.log(enteredText);\r\n    setSymbol(enteredText.name.toUpperCase());\r\n  };\r\n  const setPriceAtBuyHandler = (enteredText) => {\r\n    setPriceAtBuy(enteredText);\r\n  };\r\n  const setInvestedAmountHandler = (enteredText) => {\r\n    setInvestedAmount(enteredText);\r\n  };\r\n\r\n  async function setAutocompleteNamesHandler(searchTerm) {\r\n    setAutocompleteNames(await financeServices.getAutoCompleteData(searchTerm));\r\n  }\r\n\r\n  async function addInput() {\r\n    try {\r\n      const transaction = {\r\n        priceAtBuy: priceAtBuy,\r\n        investedAmount: investedAmount,\r\n        transactionKey: Math.random().toString(),\r\n      };\r\n      var share = {\r\n        symbol: symbol.toUpperCase(),\r\n        transactions: [],\r\n      };\r\n\r\n      var shareList = await storage.default.getAllItems();\r\n\r\n      var symbolExists = false;\r\n      if (shareList.length != 0)\r\n        for (var i in shareList) {\r\n          if (JSON.parse(shareList[i]).symbol === symbol) {\r\n            symbolExists = true;\r\n            break;\r\n          }\r\n        }\r\n      if (symbolExists) {\r\n        share = await storage.default.getItem(symbol);\r\n        share = JSON.parse(share);\r\n        share.transactions.push(transaction);\r\n        storage.default.updateItem(share.symbol, share);\r\n      } else {\r\n        share.transactions.push(transaction);\r\n        storage.default.setItem(share.symbol, share);\r\n      }\r\n      alert(\"success\");\r\n    } catch (exception) {}\r\n  }\r\n\r\n  const clearAllData = () => {\r\n    storage.default.clearAllData();\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={styles.container} keyboardShouldPersistTaps={\"handled\"}>\r\n      <View style={styles.inputContainer}>\r\n        <SearchableDropdown\r\n          multi={true}\r\n          selectedItems={selectedShareSymbol}\r\n          onItemSelect={(item) => {\r\n            setSelectedShareSymbol(item);\r\n            setSymbolHandler(item);\r\n          }}\r\n          containerStyle={{ padding: 5 }}\r\n          itemStyle={{\r\n            with: \"80%\",\r\n            padding: 10,\r\n            marginTop: 2,\r\n            backgroundColor: \"#ddd\",\r\n            borderColor: \"#bbb\",\r\n            borderWidth: 1,\r\n            borderRadius: 5,\r\n          }}\r\n          itemTextStyle={{ color: \"#222\" }}\r\n          itemsContainerStyle={{ maxHeight: 140 }}\r\n          items={autocompleteNames}\r\n          defaultIndex={2}\r\n          chip={true}\r\n          resetValue={false}\r\n          textInputProps={{\r\n            placeholder: \"placeholder\",\r\n            underlineColorAndroid: \"transparent\",\r\n            style: {\r\n              margin: \"1.5%\",\r\n              padding: 12,\r\n              borderWidth: 1,\r\n              borderColor: \"#ccc\",\r\n              borderRadius: 5,\r\n            },\r\n            onTextChange: (text) => {\r\n              setAutocompleteNamesHandler(text);\r\n            },\r\n          }}\r\n          listProps={{\r\n            nestedScrollEnabled: true,\r\n          }}\r\n        />\r\n        <TextInput\r\n          style={styles.textInput}\r\n          keyboardType=\"numeric\"\r\n          placeholder=\" Price at buy\"\r\n          placeholderTextColor=\"#788793\"\r\n          onChangeText={setPriceAtBuyHandler}\r\n        />\r\n        <TextInput\r\n          style={styles.textInput}\r\n          placeholder=\" Invested amount\"\r\n          keyboardType=\"numeric\"\r\n          placeholderTextColor=\"#788793\"\r\n          onChangeText={setInvestedAmountHandler}\r\n        />\r\n        <TouchableOpacity\r\n          style={styles.addTransactionButton}\r\n          title=\"Add transaction\"\r\n          onPress={addInput}\r\n        >\r\n          <Text style={styles.addTransactionText}>ADD TRANSACTION</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <View>\r\n        <Button\r\n          style={styles.button}\r\n          title=\"Delete all data\"\r\n          onPress={clearAllData}\r\n        />\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}