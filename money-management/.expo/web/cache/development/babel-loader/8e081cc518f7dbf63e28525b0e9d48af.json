{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport yahooFinance from \"yahoo-finance2\";\nimport * as storage from \"../services/storageServices\";\nexport default {\n  getAnalyticsForAllShares: function getAnalyticsForAllShares() {\n    var sharesAnalyticsList, list, listItem, shareAnalytics, shareQuote, totalMoneyInvested, totalNumberOfSharesOwned;\n    return _regeneratorRuntime.async(function getAnalyticsForAllShares$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sharesAnalyticsList = [];\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(storage.default.getAllItems());\n\n          case 3:\n            list = _context.sent;\n            _context.t0 = _regeneratorRuntime.keys(list);\n\n          case 5:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 18;\n              break;\n            }\n\n            listItem = _context.t1.value;\n            listItem = JSON.parse(list[listItem]);\n            shareAnalytics = {\n              symbol: listItem.symbol,\n              currentPrice: 0,\n              shareTotalValue: 0,\n              shareTotalProfit: 0,\n              averageEntryPrice: 0\n            };\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(yahooFinance.quote(listItem.symbol));\n\n          case 11:\n            shareQuote = _context.sent;\n            totalMoneyInvested = 0;\n            totalNumberOfSharesOwned = 0;\n            listItem.transactions.map(function (transaction) {\n              var numberOfSharesPerTransaction = transaction.investedAmount / transaction.priceAtBuy;\n              totalNumberOfSharesOwned += Number(numberOfSharesPerTransaction);\n              totalMoneyInvested += Number(transaction.investedAmount);\n              var currentPrice = shareQuote.regularMarketPrice;\n              shareAnalytics.currentPrice = currentPrice;\n              var currentTransactionValue = currentPrice * numberOfSharesPerTransaction;\n              shareAnalytics.shareTotalValue += currentTransactionValue;\n              var currentTransactionProfit = currentTransactionValue - transaction.investedAmount;\n              shareAnalytics.shareTotalProfit += currentTransactionProfit;\n              shareAnalytics.averageEntryPrice = totalMoneyInvested / totalNumberOfSharesOwned;\n            });\n            sharesAnalyticsList.push(shareAnalytics);\n            _context.next = 5;\n            break;\n\n          case 18:\n            return _context.abrupt(\"return\", sharesAnalyticsList);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getAutoCompleteData: function getAutoCompleteData(text) {\n    var suggestions, result;\n    return _regeneratorRuntime.async(function getAutoCompleteData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            suggestions = [];\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(yahooFinance.search(text));\n\n          case 4:\n            result = _context2.sent;\n            result.quotes.map(function (item) {\n              for (var it in item) {\n                if (it === \"symbol\") suggestions.push({\n                  id: item[it],\n                  name: item[it]\n                });\n              }\n            });\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.log(_context2.t0);\n\n          case 11:\n            console.log(suggestions);\n            return _context2.abrupt(\"return\", suggestions);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  }\n};","map":{"version":3,"sources":["D:/react native/money-management/services/financeServices.js"],"names":["yahooFinance","storage","getAnalyticsForAllShares","sharesAnalyticsList","default","getAllItems","list","listItem","JSON","parse","shareAnalytics","symbol","currentPrice","shareTotalValue","shareTotalProfit","averageEntryPrice","quote","shareQuote","totalMoneyInvested","totalNumberOfSharesOwned","transactions","map","transaction","numberOfSharesPerTransaction","investedAmount","priceAtBuy","Number","regularMarketPrice","currentTransactionValue","currentTransactionProfit","push","getAutoCompleteData","text","suggestions","search","result","quotes","item","it","id","name","console","log"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAO,KAAKC,OAAZ;AAEA,eAAe;AAEPC,EAAAA,wBAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAIPC,YAAAA,mBAJO,GAIe,EAJf;AAAA;AAAA,6CAOMF,OAAO,CAACG,OAAR,CAAgBC,WAAhB,EAPN;;AAAA;AAOPC,YAAAA,IAPO;AAAA,mDAUUA,IAVV;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUFC,YAAAA,QAVE;AAWTA,YAAAA,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACC,QAAD,CAAf,CAAX;AAGIG,YAAAA,cAdK,GAcY;AACnBC,cAAAA,MAAM,EAAEJ,QAAQ,CAACI,MADE;AAEnBC,cAAAA,YAAY,EAAE,CAFK;AAGnBC,cAAAA,eAAe,EAAE,CAHE;AAInBC,cAAAA,gBAAgB,EAAE,CAJC;AAKnBC,cAAAA,iBAAiB,EAAE;AALA,aAdZ;AAAA;AAAA,6CAsBcf,YAAY,CAACgB,KAAb,CAAmBT,QAAQ,CAACI,MAA5B,CAtBd;;AAAA;AAsBLM,YAAAA,UAtBK;AAuBLC,YAAAA,kBAvBK,GAuBgB,CAvBhB;AAwBLC,YAAAA,wBAxBK,GAwBsB,CAxBtB;AA0BTZ,YAAAA,QAAQ,CAACa,YAAT,CAAsBC,GAAtB,CAA0B,UAACC,WAAD,EAAiB;AAEzC,kBAAIC,4BAA4B,GAC9BD,WAAW,CAACE,cAAZ,GAA6BF,WAAW,CAACG,UAD3C;AAGAN,cAAAA,wBAAwB,IAAIO,MAAM,CAACH,4BAAD,CAAlC;AACAL,cAAAA,kBAAkB,IAAIQ,MAAM,CAACJ,WAAW,CAACE,cAAb,CAA5B;AAGA,kBAAIZ,YAAY,GAAGK,UAAU,CAACU,kBAA9B;AACAjB,cAAAA,cAAc,CAACE,YAAf,GAA8BA,YAA9B;AAGA,kBAAIgB,uBAAuB,GACzBhB,YAAY,GAAGW,4BADjB;AAIAb,cAAAA,cAAc,CAACG,eAAf,IAAkCe,uBAAlC;AAGA,kBAAIC,wBAAwB,GAC1BD,uBAAuB,GAAGN,WAAW,CAACE,cADxC;AAIAd,cAAAA,cAAc,CAACI,gBAAf,IAAmCe,wBAAnC;AAGAnB,cAAAA,cAAc,CAACK,iBAAf,GACEG,kBAAkB,GAAGC,wBADvB;AAED,aA7BD;AA+BAhB,YAAAA,mBAAmB,CAAC2B,IAApB,CAAyBpB,cAAzB;AAzDS;AAAA;;AAAA;AAAA,6CA2DJP,mBA3DI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6DP4B,EAAAA,mBA7DO,+BA6DaC,IA7Db;AAAA;AAAA;AAAA;AAAA;AAAA;AA8DPC,YAAAA,WA9DO,GA8DO,EA9DP;AAAA;AAAA;AAAA,6CAgEYjC,YAAY,CAACkC,MAAb,CAAoBF,IAApB,CAhEZ;;AAAA;AAgEHG,YAAAA,MAhEG;AAkETA,YAAAA,MAAM,CAACC,MAAP,CAAcf,GAAd,CAAkB,UAACgB,IAAD,EAAU;AAC1B,mBAAK,IAAIC,EAAT,IAAeD,IAAf,EAAqB;AACnB,oBAAIC,EAAE,KAAK,QAAX,EACEL,WAAW,CAACH,IAAZ,CAAiB;AAAES,kBAAAA,EAAE,EAAEF,IAAI,CAACC,EAAD,CAAV;AAAgBE,kBAAAA,IAAI,EAAEH,IAAI,CAACC,EAAD;AAA1B,iBAAjB;AACH;AACF,aALD;AAlES;AAAA;;AAAA;AAAA;AAAA;AAyETG,YAAAA,OAAO,CAACC,GAAR;;AAzES;AA2EXD,YAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AA3EW,8CA6EJA,WA7EI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import yahooFinance from \"yahoo-finance2\";\r\nimport * as storage from \"../services/storageServices\";\r\n\r\nexport default {\r\n  // get symbol, medium price, profit and total value for all shares\r\n  async getAnalyticsForAllShares() {\r\n    // array for placing the results\r\n    var sharesAnalyticsList = [];\r\n\r\n    // get all shares purchased\r\n    var list = await storage.default.getAllItems();\r\n\r\n    // iterate trough every share object\r\n    for (var listItem in list) {\r\n      listItem = JSON.parse(list[listItem]);\r\n\r\n      // create share analytics object\r\n      var shareAnalytics = {\r\n        symbol: listItem.symbol,\r\n        currentPrice: 0,\r\n        shareTotalValue: 0,\r\n        shareTotalProfit: 0,\r\n        averageEntryPrice: 0,\r\n      };\r\n\r\n      var shareQuote = await yahooFinance.quote(listItem.symbol);\r\n      var totalMoneyInvested = 0;\r\n      var totalNumberOfSharesOwned = 0;\r\n\r\n      listItem.transactions.map((transaction) => {\r\n        // divide invested amount to the inserted price\r\n        var numberOfSharesPerTransaction =\r\n          transaction.investedAmount / transaction.priceAtBuy;\r\n\r\n        totalNumberOfSharesOwned += Number(numberOfSharesPerTransaction);\r\n        totalMoneyInvested += Number(transaction.investedAmount);\r\n\r\n        // multiply the result with the current price\r\n        var currentPrice = shareQuote.regularMarketPrice;\r\n        shareAnalytics.currentPrice = currentPrice;\r\n\r\n        //calculate the transaction value\r\n        var currentTransactionValue =\r\n          currentPrice * numberOfSharesPerTransaction;\r\n\r\n        // add value to the total portofolio value\r\n        shareAnalytics.shareTotalValue += currentTransactionValue;\r\n\r\n        // subtract the invested amount from the result\r\n        var currentTransactionProfit =\r\n          currentTransactionValue - transaction.investedAmount;\r\n\r\n        // add the result to the profit value\r\n        shareAnalytics.shareTotalProfit += currentTransactionProfit;\r\n\r\n        //calculate average entry price\r\n        shareAnalytics.averageEntryPrice =\r\n          totalMoneyInvested / totalNumberOfSharesOwned;\r\n      });\r\n\r\n      sharesAnalyticsList.push(shareAnalytics);\r\n    }\r\n    return sharesAnalyticsList;\r\n  },\r\n  async getAutoCompleteData(text) {\r\n    var suggestions = [];\r\n    try {\r\n      const result = await yahooFinance.search(text /* queryOptions */);\r\n\r\n      result.quotes.map((item) => {\r\n        for (var it in item) {\r\n          if (it === \"symbol\")\r\n            suggestions.push({ id: item[it], name: item[it] });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    console.log(suggestions);\r\n\r\n    return suggestions;\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}